// Code generated by mockery v2.16.0. DO NOT EDIT.

package bookrepository

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/wachayathorn/golang-basic-structure/pkg/model"
)

// MockBookRepository is an autogenerated mock type for the BookRepository type
type MockBookRepository struct {
	mock.Mock
}

type MockBookRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookRepository) EXPECT() *MockBookRepository_Expecter {
	return &MockBookRepository_Expecter{mock: &_m.Mock}
}

// AddBook provides a mock function with given fields: book
func (_m *MockBookRepository) AddBook(book model.Book) (Book, error) {
	ret := _m.Called(book)

	var r0 Book
	if rf, ok := ret.Get(0).(func(model.Book) Book); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Get(0).(Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Book) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookRepository_AddBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBook'
type MockBookRepository_AddBook_Call struct {
	*mock.Call
}

// AddBook is a helper method to define mock.On call
//   - book model.Book
func (_e *MockBookRepository_Expecter) AddBook(book interface{}) *MockBookRepository_AddBook_Call {
	return &MockBookRepository_AddBook_Call{Call: _e.mock.On("AddBook", book)}
}

func (_c *MockBookRepository_AddBook_Call) Run(run func(book model.Book)) *MockBookRepository_AddBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Book))
	})
	return _c
}

func (_c *MockBookRepository_AddBook_Call) Return(_a0 Book, _a1 error) *MockBookRepository_AddBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBooks provides a mock function with given fields:
func (_m *MockBookRepository) GetBooks() []Book {
	ret := _m.Called()

	var r0 []Book
	if rf, ok := ret.Get(0).(func() []Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Book)
		}
	}

	return r0
}

// MockBookRepository_GetBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBooks'
type MockBookRepository_GetBooks_Call struct {
	*mock.Call
}

// GetBooks is a helper method to define mock.On call
func (_e *MockBookRepository_Expecter) GetBooks() *MockBookRepository_GetBooks_Call {
	return &MockBookRepository_GetBooks_Call{Call: _e.mock.On("GetBooks")}
}

func (_c *MockBookRepository_GetBooks_Call) Run(run func()) *MockBookRepository_GetBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBookRepository_GetBooks_Call) Return(_a0 []Book) *MockBookRepository_GetBooks_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockBookRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBookRepository creates a new instance of MockBookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBookRepository(t mockConstructorTestingTNewMockBookRepository) *MockBookRepository {
	mock := &MockBookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
